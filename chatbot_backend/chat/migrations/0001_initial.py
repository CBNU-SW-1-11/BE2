# Generated by Django 4.2.18 on 2025-07-28 01:31

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='OCRResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='ocr_files/')),
                ('file_type', models.CharField(max_length=20)),
                ('ocr_text', models.TextField(blank=True, null=True)),
                ('llm_response', models.TextField(blank=True, null=True)),
                ('llm_response_korean', models.TextField(blank=True, null=True)),
                ('translation_enabled', models.BooleanField(default=False)),
                ('translation_success', models.BooleanField(default=False)),
                ('translation_model', models.CharField(blank=True, max_length=50, null=True)),
                ('analysis_type', models.CharField(default='both', max_length=20)),
                ('analyze_by_page', models.BooleanField(default=True)),
                ('text_relevant', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ocr_result',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=255)),
                ('original_name', models.CharField(max_length=255)),
                ('file_path', models.CharField(max_length=500)),
                ('file_size', models.BigIntegerField(default=0)),
                ('duration', models.FloatField(default=0.0)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('is_analyzed', models.BooleanField(default=False)),
                ('analysis_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('analysis_type', models.CharField(choices=[('basic', 'Basic'), ('enhanced', 'Enhanced'), ('comprehensive', 'Comprehensive'), ('custom', 'Custom')], default='enhanced', max_length=20)),
                ('features_used', models.JSONField(blank=True, default=dict)),
                ('analysis_summary', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='VideoInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insight_type', models.CharField(choices=[('summary', 'Summary'), ('highlights', 'Highlights'), ('objects', 'Object Analysis'), ('scenes', 'Scene Analysis'), ('text', 'Text Analysis'), ('temporal', 'Temporal Analysis'), ('comparative', 'Comparative Analysis')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('confidence_score', models.FloatField(default=0.0)),
                ('relevance_score', models.FloatField(default=0.0)),
                ('source_data', models.JSONField(blank=True, default=dict)),
                ('user_rating', models.IntegerField(blank=True, null=True)),
                ('user_feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insights', to='chat.video')),
            ],
            options={
                'ordering': ['-relevance_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VideoAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enhanced_analysis', models.BooleanField(default=False)),
                ('success_rate', models.FloatField(default=0.0)),
                ('processing_time_seconds', models.IntegerField(default=0)),
                ('analysis_statistics', models.JSONField(default=dict)),
                ('caption_statistics', models.JSONField(default=dict)),
                ('advanced_statistics', models.JSONField(blank=True, default=dict)),
                ('quality_metrics', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('video', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='chat.video')),
            ],
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(default='en', max_length=50)),
                ('preferred_model', models.CharField(default='default', max_length=50)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'chat_user_settings',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(default='English (United States)', max_length=50)),
                ('preferred_model', models.CharField(blank=True, max_length=50, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='이메일 주소')),
                ('username', models.CharField(max_length=150, verbose_name='username')),
                ('groups', models.ManyToManyField(blank=True, related_name='chat_user_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='chat_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': '사용자',
                'verbose_name_plural': '사용자들',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SearchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField()),
                ('search_type', models.CharField(choices=[('basic', 'Basic Search'), ('advanced', 'Advanced Search'), ('object', 'Object Search'), ('text', 'Text Search'), ('scene', 'Scene Search'), ('semantic', 'Semantic Search')], default='basic', max_length=20)),
                ('search_options', models.JSONField(blank=True, default=dict)),
                ('results_summary', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chat.video')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScheduleRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_request', models.TextField(verbose_name='원본 요청')),
                ('gpt_suggestion', models.TextField(blank=True, verbose_name='GPT 제안')),
                ('claude_suggestion', models.TextField(blank=True, verbose_name='Claude 제안')),
                ('mixtral_suggestion', models.TextField(blank=True, verbose_name='Mixtral 제안')),
                ('optimized_suggestion', models.TextField(blank=True, verbose_name='최적화된 제안')),
                ('confidence_score', models.FloatField(default=0.0, verbose_name='신뢰도 점수')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '일정 요청',
                'verbose_name_plural': '일정 요청들',
                'db_table': 'ScheduleRequest',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='제목')),
                ('description', models.TextField(blank=True, verbose_name='설명')),
                ('start_time', models.DateTimeField(verbose_name='시작 시간')),
                ('end_time', models.DateTimeField(verbose_name='종료 시간')),
                ('location', models.CharField(blank=True, max_length=200, verbose_name='장소')),
                ('priority', models.CharField(choices=[('LOW', '낮음'), ('MEDIUM', '보통'), ('HIGH', '높음'), ('URGENT', '긴급')], default='MEDIUM', max_length=10, verbose_name='우선순위')),
                ('status', models.CharField(choices=[('SCHEDULED', '예정'), ('IN_PROGRESS', '진행중'), ('COMPLETED', '완료'), ('CANCELLED', '취소')], default='SCHEDULED', max_length=15, verbose_name='상태')),
                ('attendees', models.TextField(blank=True, verbose_name='참석자')),
                ('is_recurring', models.BooleanField(default=False, verbose_name='반복 일정')),
                ('recurring_pattern', models.CharField(blank=True, max_length=50, verbose_name='반복 패턴')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '일정',
                'verbose_name_plural': '일정들',
                'db_table': 'Schedule',
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='ConflictResolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conflicting_schedules', models.TextField(verbose_name='충돌 일정들')),
                ('resolution_options', models.TextField(verbose_name='해결 방안들')),
                ('selected_option', models.TextField(blank=True, verbose_name='선택된 방안')),
                ('ai_recommendations', models.TextField(verbose_name='AI 추천 사항')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conflict_resolutions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '충돌 해결',
                'verbose_name_plural': '충돌 해결들',
                'db_table': 'ConflictResolution',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AnalysisTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('analysis_config', models.JSONField(default=dict)),
                ('usage_count', models.IntegerField(default=0)),
                ('is_public', models.BooleanField(default=False)),
                ('is_system_template', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='AnalysisProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress_percentage', models.FloatField(default=0.0)),
                ('current_step', models.CharField(blank=True, max_length=200)),
                ('estimated_time_remaining', models.FloatField(blank=True, null=True)),
                ('analysis_type', models.CharField(default='enhanced', max_length=20)),
                ('current_feature', models.CharField(blank=True, max_length=50)),
                ('completed_features', models.JSONField(default=list)),
                ('total_features', models.IntegerField(default=4)),
                ('processed_frames', models.IntegerField(default=0)),
                ('total_frames', models.IntegerField(default=0)),
                ('feature_processing_times', models.JSONField(blank=True, default=dict)),
                ('progress_log', models.JSONField(blank=True, default=list)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('video', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to='chat.video')),
            ],
        ),
        migrations.CreateModel(
            name='SocialAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('nickname', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '소셜 계정',
                'verbose_name_plural': '소셜 계정들',
                'unique_together': {('provider', 'email')},
            },
        ),
        migrations.CreateModel(
            name='Scene',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scene_id', models.IntegerField()),
                ('start_time', models.FloatField()),
                ('end_time', models.FloatField()),
                ('duration', models.FloatField()),
                ('frame_count', models.IntegerField(default=0)),
                ('dominant_objects', models.JSONField(default=list)),
                ('enhanced_captions_count', models.IntegerField(default=0)),
                ('scene_type', models.CharField(blank=True, max_length=100)),
                ('complexity_score', models.FloatField(default=0.0)),
                ('advanced_features', models.JSONField(blank=True, default=dict)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scenes', to='chat.video')),
            ],
            options={
                'ordering': ['scene_id'],
                'unique_together': {('video', 'scene_id')},
            },
        ),
        migrations.CreateModel(
            name='Frame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_id', models.IntegerField()),
                ('timestamp', models.FloatField()),
                ('caption', models.TextField(blank=True)),
                ('enhanced_caption', models.TextField(blank=True)),
                ('final_caption', models.TextField(blank=True)),
                ('clip_caption', models.TextField(blank=True)),
                ('vqa_caption', models.TextField(blank=True)),
                ('detected_objects', models.JSONField(default=list)),
                ('comprehensive_features', models.JSONField(blank=True, default=dict)),
                ('quality_score', models.FloatField(default=0.0)),
                ('blip_caption', models.TextField(blank=True)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='frames', to='chat.video')),
            ],
            options={
                'ordering': ['image_id'],
                'unique_together': {('video', 'image_id')},
            },
        ),
    ]
